// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LogMedianPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogMedianPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LogMedianPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LogMedianPrice", id.toString(), this);
    }
  }

  static load(id: string): LogMedianPrice | null {
    return changetype<LogMedianPrice | null>(store.get("LogMedianPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get val(): BigInt {
    let value = this.get("val");
    return value!.toBigInt();
  }

  set val(value: BigInt) {
    this.set("val", Value.fromBigInt(value));
  }

  get age(): BigInt {
    let value = this.get("age");
    return value!.toBigInt();
  }

  set age(value: BigInt) {
    this.set("age", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class EventCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventCounter", id.toString(), this);
    }
  }

  static load(id: string): EventCounter | null {
    return changetype<EventCounter | null>(store.get("EventCounter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get first(): BigInt {
    let value = this.get("first");
    return value!.toBigInt();
  }

  set first(value: BigInt) {
    this.set("first", Value.fromBigInt(value));
  }

  get latest(): BigInt {
    let value = this.get("latest");
    return value!.toBigInt();
  }

  set latest(value: BigInt) {
    this.set("latest", Value.fromBigInt(value));
  }
}
